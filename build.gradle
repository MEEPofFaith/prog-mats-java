plugins{
    id 'java'
    id 'com.github.GlennFolker.EntityAnno' version "$entVersion"
}

version '1.0'

sourceCompatibility = 17
tasks.withType(JavaCompile).configureEach{
    sourceCompatibility = 17
    options.release = 8

    options.incremental = true
    options.encoding = 'UTF-8'
}

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    sdkRoot = System.getenv("ANDROID_SDK_ROOT") ?: System.getenv("ANDROID_HOME")
}

entityAnno{
    modName = 'prog-mats'
    mindustryVersion = project['mindustryVersion']
    revisionDir = file("$rootDir/revisions/")
    fetchPackage = 'progressed.fetched'
    genSrcPackage = 'progressed.entities.comp'
    genPackage = 'progressed.gen.entities'
}

dependencies{
    // i.
    compileOnly "com.github.Anuken.Arc:arc-core:$arcVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"

    // ii.
    annotationProcessor "com.github.GlennFolker.EntityAnno:downgrader:$entVersion"

    // iii.
    compileOnly "com.github.GlennFolker.EntityAnno:entity:$entVersion"
    // iv.
    kapt "com.github.GlennFolker.EntityAnno:entity:$entVersion"
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task moveDesktop doFirst{
    exec{
        workingDir "$buildDir"
        if(System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")){
            println "Yeeting PM to the shadow realm..."
            commandLine("cmd", "/C", "move", "/Y", "libs\\${project.archivesBaseName}Desktop.jar", "%userprofile%\\AppData\\Roaming\\Mindustry\\mods")
        }else{
            println "This task was made only for Windows. If you are a mac user, please PR the proper command to yeet PM into the mods folder."
        }
    }
}

task jarMove dependsOn "jar", "moveDesktop"
